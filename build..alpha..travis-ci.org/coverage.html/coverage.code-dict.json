{"/home/travis/build/npmtest/node-npmtest-consolidate/test.js":"/* istanbul instrument in package npmtest_consolidate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-consolidate/lib.npmtest_consolidate.js":"/* istanbul instrument in package npmtest_consolidate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_consolidate = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_consolidate = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-consolidate/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-consolidate && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_consolidate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_consolidate\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_consolidate.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_consolidate.rollup.js'] =\n            local.assetsDict['/assets.npmtest_consolidate.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_consolidate.__dirname +\n                    '/lib.npmtest_consolidate.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-consolidate/node_modules/consolidate/index.js":"module.exports = require('./lib/consolidate');","/home/travis/build/npmtest/node-npmtest-consolidate/node_modules/consolidate/lib/consolidate.js":"'use strict';\n/*\n * Engines which do not support caching of their file contents\n * should use the `read()` function defined in consolidate.js\n * On top of this, when an engine compiles to a `Function`,\n * these functions should either be cached within consolidate.js\n * or the engine itself via `options.cache`. This will allow\n * users and frameworks to pass `options.cache = true` for\n * `NODE_ENV=production`, however edit the file(s) without\n * re-loading the application in development.\n */\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs');\nvar path = require('path');\nvar Promise = require('bluebird');\n\nvar join = path.join;\nvar resolve = path.resolve;\nvar extname = path.extname;\nvar dirname = path.dirname;\n\nvar readCache = {};\n\n/**\n * Require cache.\n */\n\nvar cacheStore = {};\n\n/**\n * Require cache.\n */\n\nvar requires = {};\n\n/**\n * Clear the cache.\n *\n * @api public\n */\n\nexports.clearCache = function(){\n  cacheStore = {};\n};\n\n/**\n * Conditionally cache `compiled` template based\n * on the `options` filename and `.cache` boolean.\n *\n * @param {Object} options\n * @param {Function} compiled\n * @return {Function}\n * @api private\n */\n\nfunction cache(options, compiled) {\n  // cachable\n  if (compiled && options.filename && options.cache) {\n    delete readCache[options.filename];\n    cacheStore[options.filename] = compiled;\n    return compiled;\n  }\n\n  // check cache\n  if (options.filename && options.cache) {\n    return cacheStore[options.filename];\n  }\n\n  return compiled;\n}\n\n/**\n * Read `path` with `options` with\n * callback `(err, str)`. When `options.cache`\n * is true the template string will be cached.\n *\n * @param {String} options\n * @param {Function} fn\n * @api private\n */\n\nfunction read(path, options, fn) {\n  var str = readCache[path];\n  var cached = options.cache && str && typeof str === 'string';\n\n  // cached (only if cached is a string and not a compiled template function)\n  if (cached) return fn(null, str);\n\n  // read\n  fs.readFile(path, 'utf8', function(err, str){\n    if (err) return fn(err);\n    // remove extraneous utf8 BOM marker\n    str = str.replace(/^\\uFEFF/, '');\n    if (options.cache) readCache[path] = str;\n    fn(null, str);\n  });\n}\n\n/**\n * Read `path` with `options` with\n * callback `(err, str)`. When `options.cache`\n * is true the partial string will be cached.\n *\n * @param {String} options\n * @param {Function} fn\n * @api private\n */\n\nfunction readPartials(path, options, fn) {\n  if (!options.partials) return fn();\n  var partials = options.partials;\n  var keys = Object.keys(partials);\n\n  function next(index) {\n    if (index === keys.length) return fn(null);\n    var key = keys[index];\n    var file = join(dirname(path), partials[key] + extname(path));\n    read(file, options, function(err, str){\n      if (err) return fn(err);\n      options.partials[key] = str;\n      next(++index);\n    });\n  }\n\n  next(0);\n}\n\n\n/**\n * promisify\n */\nfunction promisify(fn, exec) {\n  return new Promise(function (res, rej) {\n    fn = fn || function (err, html) {\n      if (err) {\n        return rej(err);\n      }\n      res(html);\n    };\n    exec(fn);\n  });\n}\n\n\n/**\n * fromStringRenderer\n */\n\nfunction fromStringRenderer(name) {\n  return function(path, options, fn){\n    options.filename = path;\n\n    return promisify(fn, function(fn) {\n      readPartials(path, options, function (err) {\n        if (err) return fn(err);\n        if (cache(options)) {\n          exports[name].render('', options, fn);\n        } else {\n          read(path, options, function(err, str){\n            if (err) return fn(err);\n            exports[name].render(str, options, fn);\n          });\n        }\n      });\n    });\n  };\n}\n\n/**\n * Liquid support.\n */\n\nexports.liquid = fromStringRenderer('liquid');\n\n/**\n * Liquid string support.\n */\n\n/**\n * Note that in order to get filters and custom tags we've had to push\n * all user-defined locals down into @locals. However, just to make things\n * backwards-compatible, any property of `options` that is left after\n * processing and removing `locals`, `meta`, `filters`, `customTags` and\n * `includeDir` will also become a local.\n */\n\nexports.liquid.render = function(str, options, fn){\n  return promisify(fn, function (fn) {\n    var engine = requires.liquid || (requires.liquid = require('tinyliquid'));\n    try {\n      var context = engine.newContext();\n      var k;\n\n      /**\n       * Note that there's a bug in the library that doesn't allow us to pass\n       * the locals to newContext(), hence looping through the keys:\n       */\n\n      if (options.locals){\n        for (k in options.locals){\n          context.setLocals(k, options.locals[k]);\n        }\n        delete options.locals;\n      }\n\n      if (options.meta){\n        context.setLocals('page', options.meta);\n        delete options.meta;\n      }\n\n      /**\n       * Add any defined filters:\n       */\n\n      if (options.filters){\n        for (k in options.filters){\n          context.setFilter(k, options.filters[k]);\n        }\n        delete options.filters;\n      }\n\n      /**\n       * Set up a callback for the include directory:\n       */\n\n      var includeDir = options.includeDir || process.cwd();\n\n      context.onInclude(function (name, callback) {\n        var extname = path.extname(name) ? '' : '.liquid';\n        var filename = path.resolve(includeDir, name + extname);\n\n        fs.readFile(filename, {encoding: 'utf8'}, function (err, data){\n          if (err) return callback(err);\n          callback(null, engine.parse(data));\n        });\n      });\n      delete options.includeDir;\n\n      /**\n       * The custom tag functions need to have their results pushed back\n       * through the parser, so set up a shim before calling the provided\n       * callback:\n       */\n\n      var compileOptions = {\n        customTags: {}\n      };\n\n      if (options.customTags){\n        var tagFunctions = options.customTags;\n\n        for (k in options.customTags){\n          /*Tell jshint there's no problem with having this function in the loop */\n          /*jshint -W083 */\n          compileOptions.customTags[k] = function (context, name, body){\n            var tpl = tagFunctions[name](body.trim());\n            context.astStack.push(engine.parse(tpl));\n          };\n          /*jshint +W083 */\n        }\n        delete options.customTags;\n      }\n\n      /**\n       * Now anything left in `options` becomes a local:\n       */\n\n      for (k in options){\n        context.setLocals(k, options[k]);\n      }\n\n      /**\n       * Finally, execute the template:\n       */\n\n      var tmpl = cache(context) || cache(context, engine.compile(str, compileOptions));\n      tmpl(context, fn);\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Jade support.\n */\n\nexports.jade = function(path, options, fn){\n  return promisify(fn, function (fn) {\n    var engine = requires.jade;\n    if (!engine) {\n      try {\n        engine = requires.jade = require('jade');\n      } catch (err) {\n        try {\n          engine = requires.jade = require('then-jade');\n        } catch (otherError) {\n          throw err;\n        }\n      }\n    }\n\n    try {\n      var tmpl = cache(options) || cache(options, engine.compileFile(path, options));\n      fn(null, tmpl(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Jade string support.\n */\n\nexports.jade.render = function(str, options, fn){\n  return promisify(fn, function (fn) {\n    var engine = requires.jade;\n    if (!engine) {\n      try {\n        engine = requires.jade = require('jade');\n      } catch (err) {\n        try {\n          engine = requires.jade = require('then-jade');\n        } catch (otherError) {\n          throw err;\n        }\n      }\n    }\n\n    try {\n      var tmpl = cache(options) || cache(options, engine.compile(str, options));\n      fn(null, tmpl(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Dust support.\n */\n\nexports.dust = fromStringRenderer('dust');\n\n/**\n * Dust string support.\n */\n\nexports.dust.render = function(str, options, fn){\n  return promisify(fn, function(fn) {\n    var engine = requires.dust;\n    if (!engine) {\n      try {\n        engine = requires.dust = require('dust');\n      } catch (err) {\n        try {\n          engine = requires.dust = require('dustjs-helpers');\n        } catch (err) {\n          engine = requires.dust = require('dustjs-linkedin');\n        }\n      }\n    }\n\n    var ext = 'dust';\n    var views = '.';\n\n    if (options) {\n      if (options.ext) ext = options.ext;\n      if (options.views) views = options.views;\n      if (options.settings && options.settings.views) views = options.settings.views;\n    }\n    if (!options || (options && !options.cache)) engine.cache = {};\n\n    engine.onLoad = function(path, callback){\n      if ('' === extname(path)) path += '.' + ext;\n      if ('/' !== path[0]) path = views + '/' + path;\n      read(path, options, callback);\n    };\n\n    try {\n      var tmpl = cache(options) || cache(options, engine.compileFn(str));\n      tmpl(options, fn);\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Swig support.\n */\n\nexports.swig = fromStringRenderer('swig');\n\n/**\n * Swig string support.\n */\n\nexports.swig.render = function(str, options, fn){\n  return promisify(fn, function(fn) {\n    var engine = requires.swig || (requires.swig = require('swig'));\n\n    try {\n      if(options.cache === true) options.cache = 'memory';\n      engine.setDefaults({ cache: options.cache });\n      var tmpl = cache(options) || cache(options, engine.compile(str, options));\n      fn(null, tmpl(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Atpl support.\n */\n\nexports.atpl = fromStringRenderer('atpl');\n\n/**\n * Atpl string support.\n */\n\nexports.atpl.render = function(str, options, fn){\n  return promisify(fn, function(fn) {\n    var engine = requires.atpl || (requires.atpl = require('atpl'));\n    try {\n      var tmpl = cache(options) || cache(options, engine.compile(str, options));\n      fn(null, tmpl(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Liquor support,\n */\n\nexports.liquor = fromStringRenderer('liquor');\n\n/**\n * Liquor string support.\n */\n\nexports.liquor.render = function(str, options, fn){\n  return promisify(fn, function(fn) {\n    var engine = requires.liquor || (requires.liquor = require('liquor'));\n    try {\n      var tmpl = cache(options) || cache(options, engine.compile(str, options));\n      fn(null, tmpl(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Twig support.\n */\n\nexports.twig = fromStringRenderer('twig');\n\n/**\n * Twig string support.\n */\n\nexports.twig.render = function(str, options, fn){\n  return promisify(fn, function(fn) {\n    var engine = requires.twig || (requires.twig = require('twig').twig);\n    var templateData = {\n      data: str\n    };\n    try {\n      var tmpl = cache(templateData) || cache(templateData, engine(templateData));\n      fn(null, tmpl.render(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * EJS support.\n */\n\nexports.ejs = fromStringRenderer('ejs');\n\n/**\n * EJS string support.\n */\n\nexports.ejs.render = function(str, options, fn){\n  return promisify(fn, function (fn) {\n    var engine = requires.ejs || (requires.ejs = require('ejs'));\n    try {\n      var tmpl = cache(options) || cache(options, engine.compile(str, options));\n      fn(null, tmpl(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n\n/**\n * Eco support.\n */\n\nexports.eco = fromStringRenderer('eco');\n\n/**\n * Eco string support.\n */\n\nexports.eco.render = function(str, options, fn){\n  return promisify(fn, function(fn) {\n    var engine = requires.eco || (requires.eco = require('eco'));\n    try {\n      fn(null, engine.render(str, options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Jazz support.\n */\n\nexports.jazz = fromStringRenderer('jazz');\n\n/**\n * Jazz string support.\n */\n\nexports.jazz.render = function(str, options, fn){\n  return promisify(fn, function(fn) {\n    var engine = requires.jazz || (requires.jazz = require('jazz'));\n    try {\n      var tmpl = cache(options) || cache(options, engine.compile(str, options));\n      tmpl.eval(options, function(str){\n        fn(null, str);\n      });\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * JQTPL support.\n */\n\nexports.jqtpl = fromStringRenderer('jqtpl');\n\n/**\n * JQTPL string support.\n */\n\nexports.jqtpl.render = function(str, options, fn){\n  return promisify(fn, function(fn) {\n    var engine = requires.jqtpl || (requires.jqtpl = require('jqtpl'));\n    try {\n      engine.template(str, str);\n      fn(null, engine.tmpl(str, options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Haml support.\n */\n\nexports.haml = fromStringRenderer('haml');\n\n/**\n * Haml string support.\n */\n\nexports.haml.render = function(str, options, fn){\n  return promisify(fn, function(fn) {\n    var engine = requires.haml || (requires.haml = require('hamljs'));\n    try {\n      options.locals = options;\n      fn(null, engine.render(str, options).trimLeft());\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Hamlet support.\n */\n\nexports.hamlet = fromStringRenderer('hamlet');\n\n/**\n * Hamlet string support.\n */\n\nexports.hamlet.render = function(str, options, fn){\n  return promisify(fn, function (fn) {\n    var engine = requires.hamlet || (requires.hamlet = require('hamlet'));\n    try {\n      options.locals = options;\n      fn(null, engine.render(str, options).trimLeft());\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Whiskers support.\n */\n\nexports.whiskers = function(path, options, fn){\n  return promisify(fn, function (fn) {\n    var engine = requires.whiskers || (requires.whiskers = require('whiskers'));\n    engine.__express(path, options, fn);\n  });\n};\n\n/**\n * Whiskers string support.\n */\n\nexports.whiskers.render = function(str, options, fn){\n  return promisify(fn, function(fn) {\n    var engine = requires.whiskers || (requires.whiskers = require('whiskers'));\n    try {\n      fn(null, engine.render(str, options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Coffee-HAML support.\n */\n\nexports['haml-coffee'] = fromStringRenderer('haml-coffee');\n\n/**\n * Coffee-HAML string support.\n */\n\nexports['haml-coffee'].render = function(str, options, fn){\n  return promisify(fn, function(fn) {\n    var engine = requires['haml-coffee'] || (requires['haml-coffee'] = require('haml-coffee'));\n    try {\n      var tmpl = cache(options) || cache(options, engine.compile(str, options));\n      fn(null, tmpl(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Hogan support.\n */\n\nexports.hogan = fromStringRenderer('hogan');\n\n/**\n * Hogan string support.\n */\n\nexports.hogan.render = function(str, options, fn){\n  return promisify(fn, function (fn) {\n    var engine = requires.hogan || (requires.hogan = require('hogan.js'));\n    try {\n      var tmpl = cache(options) || cache(options, engine.compile(str, options));\n      fn(null, tmpl.render(options, options.partials));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * templayed.js support.\n */\n\nexports.templayed = fromStringRenderer('templayed');\n\n/**\n * templayed.js string support.\n */\n\nexports.templayed.render = function(str, options, fn){\n  return promisify(fn, function (fn) {\n    var engine = requires.templayed || (requires.templayed = require('templayed'));\n    try {\n      var tmpl = cache(options) || cache(options, engine(str));\n      fn(null, tmpl(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Handlebars support.\n */\n\nexports.handlebars = fromStringRenderer('handlebars');\n\n/**\n * Handlebars string support.\n */\n\nexports.handlebars.render = function(str, options, fn) {\n  return promisify(fn, function(fn) {\n    var engine = requires.handlebars || (requires.handlebars = require('handlebars'));\n    try {\n      for (var partial in options.partials) {\n        engine.registerPartial(partial, options.partials[partial]);\n      }\n      for (var helper in options.helpers) {\n        engine.registerHelper(helper, options.helpers[helper]);\n      }\n      var tmpl = cache(options) || cache(options, engine.compile(str, options));\n      fn(null, tmpl(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Underscore support.\n */\n\nexports.underscore = fromStringRenderer('underscore');\n\n/**\n * Underscore string support.\n */\n\nexports.underscore.render = function(str, options, fn) {\n  return promisify(fn, function(fn) {\n    var engine = requires.underscore || (requires.underscore = require('underscore'));\n    try {\n      var tmpl = cache(options) || cache(options, engine.template(str, null, options));\n      fn(null, tmpl(options).replace(/\\n$/, ''));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n\n/**\n * Lodash support.\n */\n\nexports.lodash = fromStringRenderer('lodash');\n\n/**\n * Lodash string support.\n */\n\nexports.lodash.render = function(str, options, fn) {\n  return promisify(fn, function (fn) {\n    var engine = requires.lodash || (requires.lodash = require('lodash'));\n    try {\n      var tmpl = cache(options) || cache(options, engine.template(str, options));\n      fn(null, tmpl(options).replace(/\\n$/, ''));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n\n/**\n * Pug support. (formerly Jade)\n */\n\nexports.pug = function(path, options, fn){\n  return promisify(fn, function (fn) {\n    var engine = requires.pug;\n    if (!engine) {\n      try {\n        engine = requires.pug = require('pug');\n      } catch (err) {\n        try {\n          engine = requires.pug = require('then-pug');\n        } catch (otherError) {\n          throw err;\n        }\n      }\n    }\n\n    try {\n      var tmpl = cache(options) || cache(options, engine.compileFile(path, options));\n      fn(null, tmpl(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Pug string support.\n */\n\nexports.pug.render = function(str, options, fn){\n  return promisify(fn, function (fn) {\n    var engine = requires.pug;\n    if (!engine) {\n      try {\n        engine = requires.pug = require('pug');\n      } catch (err) {\n        try {\n          engine = requires.pug = require('then-pug');\n        } catch (otherError) {\n          throw err;\n        }\n      }\n    }\n\n    try {\n      var tmpl = cache(options) || cache(options, engine.compile(str, options));\n      fn(null, tmpl(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n\n/**\n * QEJS support.\n */\n\nexports.qejs = fromStringRenderer('qejs');\n\n/**\n * QEJS string support.\n */\n\nexports.qejs.render = function (str, options, fn) {\n  return promisify(fn, function (fn) {\n    try {\n      var engine = requires.qejs || (requires.qejs = require('qejs'));\n      engine.render(str, options).then(function (result) {\n        fn(null, result);\n      }, function (err) {\n        fn(err);\n      }).done();\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n\n/**\n * Walrus support.\n */\n\nexports.walrus = fromStringRenderer('walrus');\n\n/**\n * Walrus string support.\n */\n\nexports.walrus.render = function (str, options, fn) {\n  return promisify(fn, function (fn) {\n    var engine = requires.walrus || (requires.walrus = require('walrus'));\n    try {\n      var tmpl = cache(options) || cache(options, engine.parse(str));\n      fn(null, tmpl.compile(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Mustache support.\n */\n\nexports.mustache = fromStringRenderer('mustache');\n\n/**\n * Mustache string support.\n */\n\nexports.mustache.render = function(str, options, fn) {\n  return promisify(fn, function (fn) {\n    var engine = requires.mustache || (requires.mustache = require('mustache'));\n    try {\n      fn(null, engine.to_html(str, options, options.partials));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Just support.\n */\n\nexports.just = function(path, options, fn){\n  return promisify(fn, function(fn) {\n    var engine = requires.just;\n    if (!engine) {\n      var JUST = require('just');\n      engine = requires.just = new JUST();\n    }\n    engine.configure({ useCache: options.cache });\n    engine.render(path, options, fn);\n  });\n};\n\n/**\n * Just string support.\n */\n\nexports.just.render = function(str, options, fn){\n  return promisify(fn, function (fn) {\n    var JUST = require('just');\n    var engine = new JUST({ root: { page: str }});\n    engine.render('page', options, fn);\n  });\n};\n\n/**\n * ECT support.\n */\n\nexports.ect = function(path, options, fn){\n  return promisify(fn, function (fn) {\n    var engine = requires.ect;\n    if (!engine) {\n      var ECT = require('ect');\n      engine = requires.ect = new ECT(options);\n    }\n    engine.configure({ cache: options.cache });\n    engine.render(path, options, fn);\n  });\n};\n\n/**\n * ECT string support.\n */\n\nexports.ect.render = function(str, options, fn){\n  return promisify(fn, function (fn) {\n    var ECT = require('ect');\n    var engine = new ECT({ root: { page: str }});\n    engine.render('page', options, fn);\n  });\n};\n\n/**\n * mote support.\n */\n\nexports.mote = fromStringRenderer('mote');\n\n/**\n * mote string support.\n */\n\nexports.mote.render = function(str, options, fn){\n  return promisify(fn, function (fn) {\n    var engine = requires.mote || (requires.mote = require('mote'));\n    try {\n      var tmpl = cache(options) || cache(options, engine.compile(str));\n      fn(null, tmpl(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Toffee support.\n */\n\nexports.toffee = function(path, options, fn){\n  return promisify(fn, function (fn) {\n    var toffee = requires.toffee || (requires.toffee = require('toffee'));\n    toffee.__consolidate_engine_render(path, options, fn);\n  });\n};\n\n/**\n * Toffee string support.\n */\n\nexports.toffee.render = function(str, options, fn) {\n  return promisify(fn, function (fn) {\n    var engine = requires.toffee || (requires.toffee = require('toffee'));\n    try {\n      engine.str_render(str, options,fn);\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * doT support.\n */\n\nexports.dot = fromStringRenderer('dot');\n\n/**\n * doT string support.\n */\n\nexports.dot.render = function (str, options, fn) {\n  return promisify(fn, function (fn) {\n    var engine = requires.dot || (requires.dot = require('dot'));\n    try {\n      var tmpl = cache(options) || cache(options, engine.compile(str, options && options._def));\n      fn(null, tmpl(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * bracket support.\n */\n\nexports.bracket = fromStringRenderer('bracket');\n\n/**\n * bracket string support.\n */\n\nexports.bracket.render = function (str, options, fn) {\n  return promisify(fn, function (fn) {\n    var engine = requires.bracket || (requires.bracket = require('bracket-template'));\n    try {\n      var tmpl = cache(options) || cache(options, engine.default.compile(str));\n      fn(null, tmpl(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Ractive support.\n */\n\nexports.ractive = fromStringRenderer('ractive');\n\n/**\n * Ractive string support.\n */\n\nexports.ractive.render = function(str, options, fn){\n  return promisify(fn, function (fn) {\n    var engine = requires.ractive || (requires.ractive = require('ractive'));\n\n    var template = cache(options) || cache(options, engine.parse(str));\n    options.template = template;\n\n    if (options.data === null || options.data === undefined)\n    {\n      var extend = (requires.extend || (requires.extend = require('util')._extend));\n\n      // Shallow clone the options object\n      options.data = extend({}, options);\n\n      // Remove consolidate-specific properties from the clone\n      var i, length;\n      var properties = [\"template\", \"filename\", \"cache\", \"partials\"];\n      for (i = 0, length = properties.length; i < length; i++) {\n        var property = properties[i];\n        delete options.data[property];\n      }\n    }\n\n    try {\n      fn(null, new engine(options).toHTML());\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Nunjucks support.\n */\n\nexports.nunjucks = fromStringRenderer('nunjucks');\n\n/**\n * Nunjucks string support.\n */\n\nexports.nunjucks.render = function (str, options, fn) {\n  return promisify(fn, function (fn) {\n\n    try {\n\n      var engine = options.nunjucksEnv || requires.nunjucks || (requires.nunjucks = require('nunjucks'));\n\n      var env = engine;\n\n      // deprecated fallback support for express\n      // <https://github.com/tj/consolidate.js/pull/152>\n      // <https://github.com/tj/consolidate.js/pull/224>\n      if (options.settings && options.settings.views)\n        env = engine.configure(options.settings.views);\n      else if (options.nunjucks && options.nunjucks.configure)\n        env = engine.configure.apply(engine, options.nunjucks.configure);\n\n      //\n      // because `renderString` does not initiate loaders\n      // we must manually create a loader for it based off\n      // either `options.settings.views` or `options.nunjucks` or `options.nunjucks.root`\n      //\n      // <https://github.com/mozilla/nunjucks/issues/730>\n      // <https://github.com/crocodilejs/node-email-templates/issues/182>\n      //\n\n      //\n      // note that the below code didn't work nor make sense before\n      // because loaders should take different options from rendering\n      //\n\n      /*\n      var loader = options.loader;\n      if (loader) {\n        var env = new engine.Environment(new loader(options));\n        env.renderString(str, options, fn);\n      } else {\n        engine.renderString(str, options, fn);\n      }\n      */\n\n      // so instead we simply check if we passed a custom loader\n      // otherwise we create a simple file based loader\n      if (options.loader) {\n        env = new engine.Environment(options.loader);\n      } else if (options.settings && options.settings.views) {\n        env = new engine.Environment(\n          new engine.FileSystemLoader(options.settings.views)\n        );\n      } else if (options.nunjucks && options.nunjucks.loader) {\n        if (typeof options.nunjucks.loader === 'string')\n          env = new engine.Environment(new engine.FileSystemLoader(options.nunjucks.loader));\n        else\n          env = new engine.Environment(\n            new engine.FileSystemLoader(\n              options.nunjucks.loader[0],\n              options.nunjucks.loader[1]\n            )\n          );\n      }\n\n      env.renderString(str, options, fn);\n\n    } catch (err) {\n      throw fn(err);\n    }\n  });\n};\n\n\n/**\n * HTMLing support.\n */\n\nexports.htmling = fromStringRenderer('htmling');\n\n/**\n * HTMLing string support.\n */\n\nexports.htmling.render = function(str, options, fn) {\n  return promisify(fn, function (fn) {\n    var engine = requires.htmling || (requires.htmling = require('htmling'));\n    try {\n      var tmpl = cache(options) || cache(options, engine.string(str));\n      fn(null, tmpl.render(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n\n/**\n *  Rendering function\n */\nfunction requireReact(module, filename) {\n  var babel = requires.babel || (requires.babel = require('babel-core'));\n\n  var compiled = babel.transformFileSync(filename, { presets: [ 'react' ] }).code\n\n  return module._compile(compiled, filename);\n}\n\nexports.requireReact = requireReact;\n\n\n/**\n *  Converting a string into a node module.\n */\nfunction requireReactString(src, filename) {\n  var babel = requires.babel || (requires.babel = require('babel-core'));\n\n  if (!filename) filename = '';\n  var m = new module.constructor();\n  filename = filename || '';\n\n  // Compile Using React\n  var compiled = babel.transform(src, { presets: [ 'react' ] }).code;\n\n  // Compile as a module\n  m.paths = module.paths;\n  m._compile(compiled, filename);\n\n  return m.exports;\n}\n\n\n/**\n * A naive helper to replace {{tags}} with options.tags content\n */\nfunction reactBaseTmpl(data, options){\n\n  var exp;\n  var regex;\n\n  // Iterates through the keys in file object\n  // and interpolate / replace {{key}} with it's value\n  for (var k in options){\n    if (options.hasOwnProperty(k)){\n      exp = '{{' + k + '}}';\n      regex = new RegExp(exp, 'g');\n      if (data.match(regex)) {\n        data = data.replace(regex, options[k]);\n      }\n    }\n  }\n\n  return data;\n}\n\n\n\n/**\n *  The main render parser for React bsaed templates\n */\nfunction reactRenderer(type){\n\n  if (require.extensions) {\n\n    // Ensure JSX is transformed on require\n    if (!require.extensions['.jsx']) {\n      require.extensions['.jsx'] = requireReact;\n    }\n\n    // Supporting .react extension as well as test cases\n    // Using .react extension is not recommended.\n    if (!require.extensions['.react']) {\n      require.extensions['.react'] = requireReact;\n    }\n\n  }\n\n  // Return rendering fx\n  return function(str, options, fn) {\n    return promisify(fn, function(fn) {\n      // React Import\n      var ReactDOM = requires.ReactDOM || (requires.ReactDOM = require('react-dom/server'));\n      var react = requires.react || (requires.react = require('react'));\n\n      // Assign HTML Base\n      var base = options.base;\n      delete options.base;\n\n      var enableCache = options.cache;\n      delete options.cache;\n\n      var isNonStatic = options.isNonStatic;\n      delete options.isNonStatic;\n\n      // Start Conversion\n      try {\n\n        var Code;\n        var Factory;\n\n        var baseStr;\n        var content;\n        var parsed;\n\n        if (!cache(options)){\n          // Parsing\n          Code = (type === 'path') ? require(resolve(str)) : requireReactString(str);\n          Factory = cache(options, react.createFactory(Code));\n\n        } else {\n          Factory = cache(options);\n        }\n\n        parsed = new Factory(options);\n        content = (isNonStatic) ? ReactDOM.renderToString(parsed) : ReactDOM.renderToStaticMarkup(parsed);\n\n        if (base){\n          baseStr = readCache[str] || fs.readFileSync(resolve(base), 'utf8');\n\n          if (enableCache){\n            readCache[str] = baseStr;\n          }\n\n          options.content = content;\n          content = reactBaseTmpl(baseStr, options);\n        }\n\n        fn(null, content);\n\n      } catch (err) {\n        fn(err);\n      }\n    });\n  };\n}\n\n/**\n * React JS Support\n */\nexports.react = reactRenderer('path');\n\n\n/**\n * React JS string support.\n */\nexports.react.render = reactRenderer('string');\n\n/**\n * ARC-templates support.\n */\n\nexports['arc-templates'] = fromStringRenderer('arc-templates');\n\n/**\n * ARC-templates string support.\n */\n\nexports['arc-templates'].render = function(str, options, fn) {\n  var readFileWithOptions = Promise.promisify(read);\n  var consolidateFileSystem = {};\n  consolidateFileSystem.readFile = function (path) {\n    return readFileWithOptions(path, options);\n  };\n\n  return promisify(fn, function (fn) {\n    try {\n      var engine = requires['arc-templates'];\n      if (!engine) {\n        var Engine = require('arc-templates/dist/es5');\n        engine = requires['arc-templates'] = new Engine({ filesystem: consolidateFileSystem });\n      }\n\n      var compiler = cache(options) || cache(options, engine.compileString(str, options.filename));\n      compiler.then(function (func) { return func(options); })\n          .then(function (result) { fn(null, result.content); })\n          .catch(fn);\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Vash support\n */\nexports.vash = fromStringRenderer('vash');\n\n/**\n * Vash string support\n */\nexports.vash.render = function(str, options, fn) {\n  return promisify(fn, function(fn) {\n    var engine = requires.vash || (requires.vash = require('vash'));\n\n    try {\n      // helper system : https://github.com/kirbysayshi/vash#helper-system\n      if (options.helpers) {\n        for (var key in options.helpers) {\n          if (!options.helpers.hasOwnProperty(key) || typeof options.helpers[key] !== 'function') {\n            continue;\n          }\n          engine.helpers[key] = options.helpers[key];\n        }\n      }\n      var tmpl = cache(options) || cache(options, engine.compile(str, options));\n      fn(null, tmpl(options).replace(/\\n$/, ''));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Slm support.\n */\n\nexports.slm = fromStringRenderer('slm');\n\n/**\n * Slm string support.\n */\n\nexports.slm.render = function(str, options, fn) {\n  return promisify(fn, function (fn) {\n    var engine = requires.slm || (requires.slm = require('slm'));\n\n    try {\n      var tmpl = cache(options) || cache(options, engine.compile(str, options));\n      fn(null, tmpl(options));\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Marko support.\n */\n\nexports.marko = function(path, options, fn){\n  return promisify(fn, function (fn) {\n    var engine = requires.marko || (requires.marko = require('marko'));\n    options.writeToDisk = !!options.cache;\n\n    try {\n      var tmpl = cache(options) || cache(options, engine.load(path, options));\n      tmpl.render(options, fn)\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * Marko string support.\n */\n\nexports.marko.render = function(str, options, fn) {\n  return promisify(fn, function (fn) {\n    var engine = requires.marko || (requires.marko = require('marko'));\n    options.writeToDisk = !!options.cache;\n\n    try {\n      var tmpl = cache(options) || cache(options, engine.load('string.marko', str, options));\n      tmpl.render(options, fn)\n    } catch (err) {\n      fn(err);\n    }\n  });\n};\n\n/**\n * expose the instance of the engine\n */\n\nexports.requires = requires;\n"}